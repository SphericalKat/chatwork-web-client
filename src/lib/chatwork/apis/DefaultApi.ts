/* tslint:disable */
/* eslint-disable */
/**
 * Chatwork API
 * API for interacting with Chatwork services
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Account,
  ApprovedContact,
  Contact,
  IncomingRequest,
  Member,
  Message,
  MyStatus,
  Room,
  RoomsPost200Response,
  RoomsRoomIdMembersPut200Response,
  RoomsRoomIdMessagesPost200Response,
  RoomsRoomIdTasksPost200Response,
  Task,
} from '../models/index';
import {
    AccountFromJSON,
    AccountToJSON,
    ApprovedContactFromJSON,
    ApprovedContactToJSON,
    ContactFromJSON,
    ContactToJSON,
    IncomingRequestFromJSON,
    IncomingRequestToJSON,
    MemberFromJSON,
    MemberToJSON,
    MessageFromJSON,
    MessageToJSON,
    MyStatusFromJSON,
    MyStatusToJSON,
    RoomFromJSON,
    RoomToJSON,
    RoomsPost200ResponseFromJSON,
    RoomsPost200ResponseToJSON,
    RoomsRoomIdMembersPut200ResponseFromJSON,
    RoomsRoomIdMembersPut200ResponseToJSON,
    RoomsRoomIdMessagesPost200ResponseFromJSON,
    RoomsRoomIdMessagesPost200ResponseToJSON,
    RoomsRoomIdTasksPost200ResponseFromJSON,
    RoomsRoomIdTasksPost200ResponseToJSON,
    TaskFromJSON,
    TaskToJSON,
} from '../models/index';

export interface IncomingRequestsRequestIdDeleteRequest {
    requestId: number;
}

export interface IncomingRequestsRequestIdPutRequest {
    requestId: number;
}

export interface MyTasksGetRequest {
    assignedByAccountId?: number;
    status?: MyTasksGetStatusEnum;
}

export interface RoomsPostRequest {
    name: string;
    membersAdminIds: string;
    description?: string;
    iconPreset?: RoomsPostIconPresetEnum;
    membersMemberIds?: string;
    membersReadonlyIds?: string;
}

export interface RoomsRoomIdDeleteRequest {
    roomId: number;
    actionType: RoomsRoomIdDeleteActionTypeEnum;
}

export interface RoomsRoomIdFilesFileIdGetRequest {
    roomId: number;
    fileId: number;
    createDownloadUrl?: RoomsRoomIdFilesFileIdGetCreateDownloadUrlEnum;
}

export interface RoomsRoomIdFilesGetRequest {
    roomId: number;
    accountId?: number;
}

export interface RoomsRoomIdGetRequest {
    roomId: number;
}

export interface RoomsRoomIdMembersGetRequest {
    roomId: number;
}

export interface RoomsRoomIdMembersPutRequest {
    roomId: number;
    membersAdminIds: string;
    membersMemberIds?: string;
    membersReadonlyIds?: string;
}

export interface RoomsRoomIdMessagesGetRequest {
    roomId: number;
    force?: RoomsRoomIdMessagesGetForceEnum;
}

export interface RoomsRoomIdMessagesMessageIdGetRequest {
    roomId: number;
    messageId: string;
}

export interface RoomsRoomIdMessagesPostRequest {
    roomId: number;
    body: string;
    selfUnread?: RoomsRoomIdMessagesPostSelfUnreadEnum;
}

export interface RoomsRoomIdPutRequest {
    roomId: number;
    name?: string;
    description?: string;
    iconPreset?: RoomsRoomIdPutIconPresetEnum;
}

export interface RoomsRoomIdTasksGetRequest {
    roomId: number;
    accountId?: number;
    assignedByAccountId?: number;
    status?: RoomsRoomIdTasksGetStatusEnum;
}

export interface RoomsRoomIdTasksPostRequest {
    roomId: number;
    body: string;
    toIds: string;
    limit?: number;
}

export interface RoomsRoomIdTasksTaskIdGetRequest {
    roomId: number;
    taskId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get the list of your contacts
     */
    async contactsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Contact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/contacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContactFromJSON));
    }

    /**
     * Get the list of your contacts
     */
    async contactsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Contact>> {
        const response = await this.contactsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the list of contact approval requests you received
     */
    async incomingRequestsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncomingRequest>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incoming_requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomingRequestFromJSON));
    }

    /**
     * Get the list of contact approval requests you received
     */
    async incomingRequestsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncomingRequest>> {
        const response = await this.incomingRequestsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Decline a contact approval request you received
     */
    async incomingRequestsRequestIdDeleteRaw(requestParameters: IncomingRequestsRequestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling incomingRequestsRequestIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incoming_requests/{request_id}`.replace(`{${"request_id"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Decline a contact approval request you received
     */
    async incomingRequestsRequestIdDelete(requestParameters: IncomingRequestsRequestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.incomingRequestsRequestIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Approve a contact approval request you received
     */
    async incomingRequestsRequestIdPutRaw(requestParameters: IncomingRequestsRequestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApprovedContact>> {
        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling incomingRequestsRequestIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/incoming_requests/{request_id}`.replace(`{${"request_id"}}`, encodeURIComponent(String(requestParameters['requestId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApprovedContactFromJSON(jsonValue));
    }

    /**
     * Approve a contact approval request you received
     */
    async incomingRequestsRequestIdPut(requestParameters: IncomingRequestsRequestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApprovedContact> {
        const response = await this.incomingRequestsRequestIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get your account information
     */
    async meGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountFromJSON(jsonValue));
    }

    /**
     * Get your account information
     */
    async meGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account> {
        const response = await this.meGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the number of: unread messages, unread To messages, and unfinished tasks
     */
    async myStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MyStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/my/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MyStatusFromJSON(jsonValue));
    }

    /**
     * Get the number of: unread messages, unread To messages, and unfinished tasks
     */
    async myStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MyStatus> {
        const response = await this.myStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the list of all unfinished tasks
     */
    async myTasksGetRaw(requestParameters: MyTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        const queryParameters: any = {};

        if (requestParameters['assignedByAccountId'] != null) {
            queryParameters['assigned_by_account_id'] = requestParameters['assignedByAccountId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/my/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Get the list of all unfinished tasks
     */
    async myTasksGet(requestParameters: MyTasksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.myTasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of all chats on your account
     */
    async roomsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     * Get the list of all chats on your account
     */
    async roomsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.roomsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new group chat
     */
    async roomsPostRaw(requestParameters: RoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomsPost200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling roomsPost().'
            );
        }

        if (requestParameters['membersAdminIds'] == null) {
            throw new runtime.RequiredError(
                'membersAdminIds',
                'Required parameter "membersAdminIds" was null or undefined when calling roomsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['iconPreset'] != null) {
            formParams.append('icon_preset', requestParameters['iconPreset'] as any);
        }

        if (requestParameters['membersAdminIds'] != null) {
            formParams.append('members_admin_ids', requestParameters['membersAdminIds'] as any);
        }

        if (requestParameters['membersMemberIds'] != null) {
            formParams.append('members_member_ids', requestParameters['membersMemberIds'] as any);
        }

        if (requestParameters['membersReadonlyIds'] != null) {
            formParams.append('members_readonly_ids', requestParameters['membersReadonlyIds'] as any);
        }

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new group chat
     */
    async roomsPost(requestParameters: RoomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomsPost200Response> {
        const response = await this.roomsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Leave/Delete a group chat
     */
    async roomsRoomIdDeleteRaw(requestParameters: RoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdDelete().'
            );
        }

        if (requestParameters['actionType'] == null) {
            throw new runtime.RequiredError(
                'actionType',
                'Required parameter "actionType" was null or undefined when calling roomsRoomIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['actionType'] != null) {
            formParams.append('action_type', requestParameters['actionType'] as any);
        }

        const response = await this.request({
            path: `/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave/Delete a group chat
     */
    async roomsRoomIdDelete(requestParameters: RoomsRoomIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.roomsRoomIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get information about the specified file
     */
    async roomsRoomIdFilesFileIdGetRaw(requestParameters: RoomsRoomIdFilesFileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdFilesFileIdGet().'
            );
        }

        if (requestParameters['fileId'] == null) {
            throw new runtime.RequiredError(
                'fileId',
                'Required parameter "fileId" was null or undefined when calling roomsRoomIdFilesFileIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['createDownloadUrl'] != null) {
            queryParameters['create_download_url'] = requestParameters['createDownloadUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/files/{file_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))).replace(`{${"file_id"}}`, encodeURIComponent(String(requestParameters['fileId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get information about the specified file
     */
    async roomsRoomIdFilesFileIdGet(requestParameters: RoomsRoomIdFilesFileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.roomsRoomIdFilesFileIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of files associated with the specified chat
     */
    async roomsRoomIdFilesGetRaw(requestParameters: RoomsRoomIdFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<any>>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdFilesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/files`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of files associated with the specified chat
     */
    async roomsRoomIdFilesGet(requestParameters: RoomsRoomIdFilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<any>> {
        const response = await this.roomsRoomIdFilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get chat name, icon, and Type
     */
    async roomsRoomIdGetRaw(requestParameters: RoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Get chat name, icon, and Type
     */
    async roomsRoomIdGet(requestParameters: RoomsRoomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.roomsRoomIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of all chat members associated with the specified chat
     */
    async roomsRoomIdMembersGetRaw(requestParameters: RoomsRoomIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Member>>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdMembersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/members`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberFromJSON));
    }

    /**
     * Get the list of all chat members associated with the specified chat
     */
    async roomsRoomIdMembersGet(requestParameters: RoomsRoomIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Member>> {
        const response = await this.roomsRoomIdMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change associated members of group chat at once
     */
    async roomsRoomIdMembersPutRaw(requestParameters: RoomsRoomIdMembersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomsRoomIdMembersPut200Response>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdMembersPut().'
            );
        }

        if (requestParameters['membersAdminIds'] == null) {
            throw new runtime.RequiredError(
                'membersAdminIds',
                'Required parameter "membersAdminIds" was null or undefined when calling roomsRoomIdMembersPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['membersAdminIds'] != null) {
            formParams.append('members_admin_ids', requestParameters['membersAdminIds'] as any);
        }

        if (requestParameters['membersMemberIds'] != null) {
            formParams.append('members_member_ids', requestParameters['membersMemberIds'] as any);
        }

        if (requestParameters['membersReadonlyIds'] != null) {
            formParams.append('members_readonly_ids', requestParameters['membersReadonlyIds'] as any);
        }

        const response = await this.request({
            path: `/rooms/{room_id}/members`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsRoomIdMembersPut200ResponseFromJSON(jsonValue));
    }

    /**
     * Change associated members of group chat at once
     */
    async roomsRoomIdMembersPut(requestParameters: RoomsRoomIdMembersPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomsRoomIdMembersPut200Response> {
        const response = await this.roomsRoomIdMembersPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all messages associated with the specified chat
     */
    async roomsRoomIdMessagesGetRaw(requestParameters: RoomsRoomIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Message>>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdMessagesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/messages`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageFromJSON));
    }

    /**
     * Get all messages associated with the specified chat
     */
    async roomsRoomIdMessagesGet(requestParameters: RoomsRoomIdMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Message>> {
        const response = await this.roomsRoomIdMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about the specified message
     */
    async roomsRoomIdMessagesMessageIdGetRaw(requestParameters: RoomsRoomIdMessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdMessagesMessageIdGet().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling roomsRoomIdMessagesMessageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/messages/{message_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))).replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Get information about the specified message
     */
    async roomsRoomIdMessagesMessageIdGet(requestParameters: RoomsRoomIdMessagesMessageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.roomsRoomIdMessagesMessageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add new message to the chat
     */
    async roomsRoomIdMessagesPostRaw(requestParameters: RoomsRoomIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomsRoomIdMessagesPost200Response>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdMessagesPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling roomsRoomIdMessagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['body'] != null) {
            formParams.append('body', requestParameters['body'] as any);
        }

        if (requestParameters['selfUnread'] != null) {
            formParams.append('self_unread', requestParameters['selfUnread'] as any);
        }

        const response = await this.request({
            path: `/rooms/{room_id}/messages`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsRoomIdMessagesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Add new message to the chat
     */
    async roomsRoomIdMessagesPost(requestParameters: RoomsRoomIdMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomsRoomIdMessagesPost200Response> {
        const response = await this.roomsRoomIdMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the title and icon type of the specified chat
     */
    async roomsRoomIdPutRaw(requestParameters: RoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomsPost200Response>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['iconPreset'] != null) {
            formParams.append('icon_preset', requestParameters['iconPreset'] as any);
        }

        const response = await this.request({
            path: `/rooms/{room_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Change the title and icon type of the specified chat
     */
    async roomsRoomIdPut(requestParameters: RoomsRoomIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomsPost200Response> {
        const response = await this.roomsRoomIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of tasks associated with the specified chat
     */
    async roomsRoomIdTasksGetRaw(requestParameters: RoomsRoomIdTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Task>>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdTasksGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['accountId'] != null) {
            queryParameters['account_id'] = requestParameters['accountId'];
        }

        if (requestParameters['assignedByAccountId'] != null) {
            queryParameters['assigned_by_account_id'] = requestParameters['assignedByAccountId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/tasks`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskFromJSON));
    }

    /**
     * Get the list of tasks associated with the specified chat
     */
    async roomsRoomIdTasksGet(requestParameters: RoomsRoomIdTasksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Task>> {
        const response = await this.roomsRoomIdTasksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new task to the chat
     */
    async roomsRoomIdTasksPostRaw(requestParameters: RoomsRoomIdTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomsRoomIdTasksPost200Response>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdTasksPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling roomsRoomIdTasksPost().'
            );
        }

        if (requestParameters['toIds'] == null) {
            throw new runtime.RequiredError(
                'toIds',
                'Required parameter "toIds" was null or undefined when calling roomsRoomIdTasksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['body'] != null) {
            formParams.append('body', requestParameters['body'] as any);
        }

        if (requestParameters['limit'] != null) {
            formParams.append('limit', requestParameters['limit'] as any);
        }

        if (requestParameters['toIds'] != null) {
            formParams.append('to_ids', requestParameters['toIds'] as any);
        }

        const response = await this.request({
            path: `/rooms/{room_id}/tasks`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsRoomIdTasksPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a new task to the chat
     */
    async roomsRoomIdTasksPost(requestParameters: RoomsRoomIdTasksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomsRoomIdTasksPost200Response> {
        const response = await this.roomsRoomIdTasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about the specified task
     */
    async roomsRoomIdTasksTaskIdGetRaw(requestParameters: RoomsRoomIdTasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling roomsRoomIdTasksTaskIdGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling roomsRoomIdTasksTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{room_id}/tasks/{task_id}`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Get information about the specified task
     */
    async roomsRoomIdTasksTaskIdGet(requestParameters: RoomsRoomIdTasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.roomsRoomIdTasksTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const MyTasksGetStatusEnum = {
    Open: 'open',
    Done: 'done'
} as const;
export type MyTasksGetStatusEnum = typeof MyTasksGetStatusEnum[keyof typeof MyTasksGetStatusEnum];
/**
 * @export
 */
export const RoomsPostIconPresetEnum = {
    Group: 'group',
    Check: 'check',
    Document: 'document',
    Meeting: 'meeting',
    Event: 'event',
    Project: 'project',
    Business: 'business',
    Study: 'study',
    Security: 'security',
    Star: 'star',
    Idea: 'idea',
    Heart: 'heart',
    Magcup: 'magcup',
    Beer: 'beer',
    Music: 'music',
    Sports: 'sports',
    Travel: 'travel'
} as const;
export type RoomsPostIconPresetEnum = typeof RoomsPostIconPresetEnum[keyof typeof RoomsPostIconPresetEnum];
/**
 * @export
 */
export const RoomsRoomIdDeleteActionTypeEnum = {
    Leave: 'leave',
    Delete: 'delete'
} as const;
export type RoomsRoomIdDeleteActionTypeEnum = typeof RoomsRoomIdDeleteActionTypeEnum[keyof typeof RoomsRoomIdDeleteActionTypeEnum];
/**
 * @export
 */
export const RoomsRoomIdFilesFileIdGetCreateDownloadUrlEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomsRoomIdFilesFileIdGetCreateDownloadUrlEnum = typeof RoomsRoomIdFilesFileIdGetCreateDownloadUrlEnum[keyof typeof RoomsRoomIdFilesFileIdGetCreateDownloadUrlEnum];
/**
 * @export
 */
export const RoomsRoomIdMessagesGetForceEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomsRoomIdMessagesGetForceEnum = typeof RoomsRoomIdMessagesGetForceEnum[keyof typeof RoomsRoomIdMessagesGetForceEnum];
/**
 * @export
 */
export const RoomsRoomIdMessagesPostSelfUnreadEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;
export type RoomsRoomIdMessagesPostSelfUnreadEnum = typeof RoomsRoomIdMessagesPostSelfUnreadEnum[keyof typeof RoomsRoomIdMessagesPostSelfUnreadEnum];
/**
 * @export
 */
export const RoomsRoomIdPutIconPresetEnum = {
    Group: 'group',
    Check: 'check',
    Document: 'document',
    Meeting: 'meeting',
    Event: 'event',
    Project: 'project',
    Business: 'business',
    Study: 'study',
    Security: 'security',
    Star: 'star',
    Idea: 'idea',
    Heart: 'heart',
    Magcup: 'magcup',
    Beer: 'beer',
    Music: 'music',
    Sports: 'sports',
    Travel: 'travel'
} as const;
export type RoomsRoomIdPutIconPresetEnum = typeof RoomsRoomIdPutIconPresetEnum[keyof typeof RoomsRoomIdPutIconPresetEnum];
/**
 * @export
 */
export const RoomsRoomIdTasksGetStatusEnum = {
    Open: 'open',
    Done: 'done'
} as const;
export type RoomsRoomIdTasksGetStatusEnum = typeof RoomsRoomIdTasksGetStatusEnum[keyof typeof RoomsRoomIdTasksGetStatusEnum];
