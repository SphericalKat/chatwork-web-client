/* tslint:disable */
/* eslint-disable */
/**
 * Chatwork API
 * API for interacting with Chatwork services
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
    AccountToJSONTyped,
} from './Account';
import type { Room } from './Room';
import {
    RoomFromJSON,
    RoomFromJSONTyped,
    RoomToJSON,
    RoomToJSONTyped,
} from './Room';

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    taskId?: number;
    /**
     * 
     * @type {Room}
     * @memberof Task
     */
    room?: Room;
    /**
     * 
     * @type {Account}
     * @memberof Task
     */
    assignedByAccount?: Account;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    messageId?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    body?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    limitTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    status?: TaskStatusEnum;
}


/**
 * @export
 */
export const TaskStatusEnum = {
    Open: 'open',
    Done: 'done'
} as const;
export type TaskStatusEnum = typeof TaskStatusEnum[keyof typeof TaskStatusEnum];


/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): value is Task {
    return true;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if (json == null) {
        return json;
    }
    return {
        
        'taskId': json['task_id'] == null ? undefined : json['task_id'],
        'room': json['room'] == null ? undefined : RoomFromJSON(json['room']),
        'assignedByAccount': json['assigned_by_account'] == null ? undefined : AccountFromJSON(json['assigned_by_account']),
        'messageId': json['message_id'] == null ? undefined : json['message_id'],
        'body': json['body'] == null ? undefined : json['body'],
        'limitTime': json['limit_time'] == null ? undefined : json['limit_time'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

  export function TaskToJSON(json: any): Task {
      return TaskToJSONTyped(json, false);
  }

  export function TaskToJSONTyped(value?: Task | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'task_id': value['taskId'],
        'room': RoomToJSON(value['room']),
        'assigned_by_account': AccountToJSON(value['assignedByAccount']),
        'message_id': value['messageId'],
        'body': value['body'],
        'limit_time': value['limitTime'],
        'status': value['status'],
    };
}

