/* tslint:disable */
/* eslint-disable */
/**
 * Chatwork API
 * API for interacting with Chatwork services
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    roomId?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    role?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Room
     */
    sticky?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    unreadNum?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    mentionNum?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    mytaskNum?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    messageNum?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    fileNum?: number;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    taskNum?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    iconPath?: string;
    /**
     * 
     * @type {number}
     * @memberof Room
     */
    lastUpdateTime?: number;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    description?: string;
}

/**
 * Check if a given object implements the Room interface.
 */
export function instanceOfRoom(value: object): value is Room {
    return true;
}

export function RoomFromJSON(json: any): Room {
    return RoomFromJSONTyped(json, false);
}

export function RoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): Room {
    if (json == null) {
        return json;
    }
    return {
        
        'roomId': json['room_id'] == null ? undefined : json['room_id'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
        'role': json['role'] == null ? undefined : json['role'],
        'sticky': json['sticky'] == null ? undefined : json['sticky'],
        'unreadNum': json['unread_num'] == null ? undefined : json['unread_num'],
        'mentionNum': json['mention_num'] == null ? undefined : json['mention_num'],
        'mytaskNum': json['mytask_num'] == null ? undefined : json['mytask_num'],
        'messageNum': json['message_num'] == null ? undefined : json['message_num'],
        'fileNum': json['file_num'] == null ? undefined : json['file_num'],
        'taskNum': json['task_num'] == null ? undefined : json['task_num'],
        'iconPath': json['icon_path'] == null ? undefined : json['icon_path'],
        'lastUpdateTime': json['last_update_time'] == null ? undefined : json['last_update_time'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

  export function RoomToJSON(json: any): Room {
      return RoomToJSONTyped(json, false);
  }

  export function RoomToJSONTyped(value?: Room | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'room_id': value['roomId'],
        'name': value['name'],
        'type': value['type'],
        'role': value['role'],
        'sticky': value['sticky'],
        'unread_num': value['unreadNum'],
        'mention_num': value['mentionNum'],
        'mytask_num': value['mytaskNum'],
        'message_num': value['messageNum'],
        'file_num': value['fileNum'],
        'task_num': value['taskNum'],
        'icon_path': value['iconPath'],
        'last_update_time': value['lastUpdateTime'],
        'description': value['description'],
    };
}

